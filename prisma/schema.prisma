generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum ActionMethodEnum {
  get     @map("get")
  put     @map("put")
  post    @map("post")
  patch   @map("patch")
  delete  @map("delete")

  @@map("action_method")
}

model ActionModel {
  id           String            @map("id")           @db.Uuid       @default(dbgenerated("GEN_RANDOM_UUID()"))
  url          String            @map("url")          @db.VarChar()
  name         String            @map("name")         @db.VarChar()
  description  String            @map("description")  @db.VarChar()  @default("")
  method       ActionMethodEnum  

  roles  RoleModel[]
  users  UserModel[]

  @@id([ id ])
  @@index([ id ])
  @@unique([ url, name, method ])
  @@map("action")
}

model RoleModel {
  id         String    @map("id")          @db.Uuid         @default(dbgenerated("GEN_RANDOM_UUID()"))
  name       String    @map("name")        @db.VarChar()

  users    UserModel[]
  actions  ActionModel[]

  @@id([ id ])
  @@index([ id ])
  @@unique([ name ])
  @@map("role")
}


model UserModel {
  id         String     @map("id")          @db.Uuid         @default(dbgenerated("GEN_RANDOM_UUID()"))
  phone      String     @map("phone")       @db.VarChar()                                    @unique 
  username   String     @map("username")    @db.VarChar()                                    @unique
  fullname   String     @map("fullname")    @db.VarChar()
  password   String     @map("password")    @db.VarChar()  
 
  createdAt  DateTime   @map("created_at")  @db.Timestamptz  @default(dbgenerated("NOW()"))
  updatedAt  DateTime   @map("updated_at")  @db.Timestamptz  @updatedAt
  deletedAt  DateTime?  @map("deleted_at")  @db.Timestamptz

  partnerInfo  PartnerInfo?

  roles    RoleModel[]
  actions  ActionModel[]

  @@id([ id ])
  @@index([ id ])
  @@map("user")
}

model PartnerInfo {
  userId     String  @map("user_id")     @db.Uuid       @id           @unique
  balance    BigInt  @map("balance")     @db.BigInt     @default(0)
  whereFrom  String  @map("where_from")  @db.VarChar()  @default("")

  user  UserModel  @relation(fields: [ userId ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)

  @@index([ userId ])
  @@map("partner_info")
}



